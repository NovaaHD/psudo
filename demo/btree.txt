function TREE_INSERT(tree, node)
    y = None
    x = tree
    while x != None
        y = x
        if node.value < x.value
            x = x.left
        else
            x = x.right
    if y == None
        tree = node
    else if node.value < y.value
        y.left = node
    else
        y.right = node
    return tree


function PREORDER_TREE_WALK(tree)
    if tree != None
        preorder.push(tree.value)
        PREORDER_TREE_WALK(tree.left)
        PREORDER_TREE_WALK(tree.right)


function INORDER_TREE_WALK(tree)
    if tree != None
        INORDER_TREE_WALK(tree.left)
        inorder.push(tree.value)
        INORDER_TREE_WALK(tree.right)


function POSTORDER_TREE_WALK(tree)
    if tree != None
        POSTORDER_TREE_WALK(tree.left)
        POSTORDER_TREE_WALK(tree.right)
        postorder.push(tree.value)


elem = [12, 5, 9, 2, 18, 15, 13, 17, 19]

btree = None

for value in elem
    node = BTree(value)
    btree = TREE_INSERT(btree, node)

# node_a = Node('c', [Node('d'), Node('e')])
# node_b = Node('b', [Node('f')])
# btree = BTree('root', node_a, node_b)

# preorder = Stack()
# inorder = Stack()
# postorder = Stack()

# PREORDER_TREE_WALK(btree)
# INORDER_TREE_WALK(btree)
# POSTORDER_TREE_WALK(btree)
