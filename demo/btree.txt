function TREE_INSERT(tree, node)
    y = None
    x = tree
    while x != None
        y = x
        if node.val < x.val
            x = x.left
        else
            x = x.right
    node.parent = y
    if y == None
        tree = node
    else if node.val < y.val
        y.left = node
    else
        y.right = node
    return tree


function TREE_SEARCH(tree, val)
    ret = None
    if (tree == None) or (tree.val == val)
        ret = tree
    else if val < tree.val
        ret = TREE_SEARCH(tree.left, val)
    else
        ret = TREE_SEARCH(tree.right, val)
    return ret


function TREE_MINIMUM(tree)
    while tree.left != None
        tree = tree.left
    return tree


function TREE_MAXIMUM(tree)
    while tree.right != None
        tree = tree.right
    return tree


function PREORDER_TREE_WALK(tree)
    if tree != None
        preorder.push(tree.val)
        PREORDER_TREE_WALK(tree.left)
        PREORDER_TREE_WALK(tree.right)


function INORDER_TREE_WALK(tree)
    if tree != None
        INORDER_TREE_WALK(tree.left)
        inorder.push(tree.val)
        INORDER_TREE_WALK(tree.right)


function POSTORDER_TREE_WALK(tree)
    if tree != None
        POSTORDER_TREE_WALK(tree.left)
        POSTORDER_TREE_WALK(tree.right)
        postorder.push(tree.val)


elem = [12, 5, 9, 2, 18]
btree = None

for val in elem
    node = BTree(val)
    btree = TREE_INSERT(btree, node)

search = TREE_SEARCH(btree, 15)

min = TREE_MINIMUM(btree)
max = TREE_MAXIMUM(btree)

preorder = Stack()
inorder = Stack()
postorder = Stack()

PREORDER_TREE_WALK(btree)
INORDER_TREE_WALK(btree)
POSTORDER_TREE_WALK(btree)
